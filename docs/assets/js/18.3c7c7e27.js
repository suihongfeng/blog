(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{241:function(e,v,_){"use strict";_.r(v);var t=_(0),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),_("p",[e._v("DOM 是Document Object Model 的缩写，全称为“文档对象模型”，是 JS 操作网页的接口。它的作用是将网页转为一个 JS 对象，从而可以用脚本进行各种操作（比如增删内容）。")]),e._v(" "),_("p",[e._v("浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。")]),e._v(" "),_("h2",{attrs:{id:"dom-与-js"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dom-与-js"}},[e._v("#")]),e._v(" DOM 与 JS")]),e._v(" "),_("p",[e._v("DOM 只是一个接口规范，可以用各种语言实现。")]),e._v(" "),_("p",[e._v("DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。")]),e._v(" "),_("h2",{attrs:{id:"节点（node）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#节点（node）"}},[e._v("#")]),e._v(" 节点（node）")]),e._v(" "),_("p",[e._v("DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。")]),e._v(" "),_("p",[e._v("节点的类型有七种。")]),e._v(" "),_("ul",[_("li",[e._v("Document：整个文档树的顶层节点")]),e._v(" "),_("li",[e._v("DocumentType：doctype标签（比如<!DOCTYPE html>）")]),e._v(" "),_("li",[e._v("Element：网页的各种HTML标签（比如"),_("body",[e._v("、"),_("a",[e._v("等）")])])]),e._v(" "),_("li",[e._v('Attribute：网页元素的属性（比如class="right"）')]),e._v(" "),_("li",[e._v("Text：标签之间或标签包含的文本")]),e._v(" "),_("li",[e._v("Comment：注释")]),e._v(" "),_("li",[e._v("DocumentFragment：文档的片段")])]),e._v(" "),_("p",[e._v("浏览器提供一个原生的节点对象Node，上面这七种节点都继承了Node，因此具有一些共同的属性和方法。")]),e._v(" "),_("p",[e._v("一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。")]),e._v(" "),_("p",[e._v("文档的第一层的 html 标签构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。除了根节点，其他节点都有三种层级关系：")]),e._v(" "),_("ul",[_("li",[e._v("父节点关系（parentNode）：直接的那个上级节点")]),e._v(" "),_("li",[e._v("子节点关系（childNodes）：直接的下级节点")]),e._v(" "),_("li",[e._v("同级节点关系（sibling）：拥有同一个父节点的节点")])]),e._v(" "),_("p",[e._v("DOM 提供操作接口，用来获取这三种关系的节点。")]),e._v(" "),_("h2",{attrs:{id:"node-对象的属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-对象的属性"}},[e._v("#")]),e._v(" Node 对象的属性")]),e._v(" "),_("p",[e._v("这些属性都在其prototype 这个原型对象上。")]),e._v(" "),_("p",[e._v("nodeType属性返回一个整数值，表示节点的类型。确定节点类型时，使用nodeType属性是常用方法。比如文档节点为9，元素节点为1，属性节点为2。")]),e._v(" "),_("p",[e._v("nodeName属性返回节点的名称。而nodeValue属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。")]),e._v(" "),_("p",[e._v("textContent属性自动忽略当前节点内部的 HTML 标签，返回当前节点和它的所有后代节点的文本内容。")]),e._v(" "),_("p",[e._v("baseURI属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。")]),e._v(" "),_("p",[e._v("ownerDocument属性返回当前节点所在的顶层文档对象，即document对象。")]),e._v(" "),_("p",[e._v("nextSibling属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回null。")]),e._v(" "),_("p",[e._v("previousSibling属性返回当前节点前面的、距离最近的一个同级节点。")]),e._v(" "),_("p",[e._v("parentNode属性返回当前节点的父节点。对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）。")]),e._v(" "),_("p",[e._v("firstChild属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回null。返回的除了元素节点，还可能是文本节点或注释节点。")]),e._v(" "),_("p",[e._v("lastChild属性返回当前节点的最后一个子节点，如果当前节点没有子节点，则返回null。")]),e._v(" "),_("p",[e._v("childNodes属性返回一个类似数组的对象（NodeList集合），成员包括当前节点的所有子节点。")]),e._v(" "),_("p",[e._v("isConnected属性返回一个布尔值，表示当前节点是否在文档之中。")]),e._v(" "),_("h2",{attrs:{id:"node-对象的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-对象的方法"}},[e._v("#")]),e._v(" Node 对象的方法")]),e._v(" "),_("p",[e._v("appendChild()方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。该方法的返回值就是插入文档的子节点。")]),e._v(" "),_("p",[e._v("hasChildNodes方法返回一个布尔值，表示当前节点是否有子节点。")]),e._v(" "),_("p",[e._v("cloneNode方法用于克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点")]),e._v(" "),_("p",[e._v("insertBefore方法用于将某个节点插入父节点内部的指定位置。")]),e._v(" "),_("p",[e._v("removeChild方法接受一个子节点作为参数，用于从当前节点移除该子节点。返回值是移除的子节点。")]),e._v(" "),_("p",[e._v("replaceChild方法用于将一个新的节点，替换当前节点的某一个子节点。")])])}),[],!1,null,null,null);v.default=o.exports}}]);